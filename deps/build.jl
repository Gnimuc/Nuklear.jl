using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libnuklear"], :libnuklear),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/NuklearBuilder/releases/download/nuklear@181cfd8"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.aarch64-linux-gnu.tar.gz", "d330cfadaede50345f5f5a6ae9256dbd630a65a367ef82725d41a33ad955a708"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.aarch64-linux-musl.tar.gz", "25a1b3d42458812d1d081eb62681001fc097de183ee98af4e52617d3b649604a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/nuklear.v181.0.0-cfd8.arm-linux-gnueabihf.tar.gz", "73cc3253976a4e5728b16e3f701e42fc1779de92861b9440ad39f8e00991b88a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/nuklear.v181.0.0-cfd8.arm-linux-musleabihf.tar.gz", "c49b0c7eb8e844474a810b5f73fb44585d611e480a04296002e1922fc66bb732"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-linux-gnu.tar.gz", "a8e402c5e03a8351ec30221d735928ec2164c5d3802ca1602e65361b097ef372"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-linux-musl.tar.gz", "fa5bc9a01e0d8a3d386d0b3fc625db64c43f3d277793452a5ba2d6046157f24b"),
    Windows(:i686) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-w64-mingw32.tar.gz", "d9f59a6117653759b47c6062b7dc786d4b01294a7371ddc9980565735ff4c42d"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.powerpc64le-linux-gnu.tar.gz", "3065ab57e835f3d0f17d67079baea572d6d1eda64dcd8155cc8ff01e0f44ea6e"),
    MacOS(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-apple-darwin14.tar.gz", "d2fd93f13de168c1e8eb99d549d5434104ab718c3cd9030f8b2486eda55b990e"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-linux-gnu.tar.gz", "5e1b17c4ad5d859f0dc7c588d0e93768151f12e9c28904bb91c1fd0ccbacad95"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-linux-musl.tar.gz", "75c54be534f16ac801095c5ce62547559b9ff0a76199645d349ce4000552bc49"),
    FreeBSD(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-unknown-freebsd11.1.tar.gz", "aba5f44b06081d0e8a3073a4f1e1800b61bd9d6bb24d92df2b41fe602bf792f6"),
    Windows(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-w64-mingw32.tar.gz", "f3aa4af93b484553bc1881e0cd51df1bf0df306247e393d753a5bbbc33de92ba"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
