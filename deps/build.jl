using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libnuklear"], :libnuklear),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/NuklearBuilder/releases/download/nuklear@181cfd8-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.aarch64-linux-gnu.tar.gz", "4c32fa492ba7f32d5987be2dfe2d783e09dffbaba1eb98d24f301ac0d0212562"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.aarch64-linux-musl.tar.gz", "ce2edfa96b01d8d0eca7fdf291257ff04cc5bb6b8ed9f3af63ff2287772a8235"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/nuklear.v181.0.0-cfd8.arm-linux-gnueabihf.tar.gz", "78a9ccfc1b1b9ceac46a1f41691a4568a50aea29e2b8c37e2ef0c28f33298ba9"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/nuklear.v181.0.0-cfd8.arm-linux-musleabihf.tar.gz", "c613baa3c55e8906625c8428e8253675de604922d050338e0c95dac04c18121b"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-linux-gnu.tar.gz", "ce51b780f9ccf30599ec87f77e3f1457a0230d939caaa5b74c6203c7981a6404"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-linux-musl.tar.gz", "803c7ebb87b51e7904b369ccbb307008798de259f3b5c660a76a8120905a8a6c"),
    Windows(:i686) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-w64-mingw32.tar.gz", "7adca5a98d244900f85107d4a5a2ac99af72fd977bcbb4301125ee914e2b2a9e"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.powerpc64le-linux-gnu.tar.gz", "f2f0525336966f1583af9e9aa21a514c1959eba2d357239ad2012a88cf913ef6"),
    MacOS(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-apple-darwin14.tar.gz", "7c180923e54935f134eb510c3dedbf97f7b03cf7b405386026b0925b88aba4a9"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-linux-gnu.tar.gz", "e0df800a0504f5be3b8db5ce3702d87f94d178ce59f92d639b7c5edd7e220428"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-linux-musl.tar.gz", "c5fb25fda74b1cab71f6a1a5c09e488c38e45f4bd3493e3ae6643fb0e8df73eb"),
    FreeBSD(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-unknown-freebsd11.1.tar.gz", "8241defc2fa85977082a059b42f2b1a11638a3f96e649bcfd4470c6568db321b"),
    Windows(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-w64-mingw32.tar.gz", "9aaadb2bdb08847143cca46fab3a4041063da51a23a269542146f41b293ebddb"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
