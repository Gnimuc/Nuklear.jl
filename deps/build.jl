using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libnuklear"], :libnuklear),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/NuklearBuilder/releases/download/nuklear@181cfd8-3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.aarch64-linux-gnu.tar.gz", "3da51a3fa816f65b39124f363f4e3ae4b4d2869aed409e1996a1183d22fd9ede"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.aarch64-linux-musl.tar.gz", "a0e70abad16d5cf93856e3f8f39ad29fe8f7ab289badb1b76083233f9b40319a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/nuklear.v181.0.0-cfd8.arm-linux-gnueabihf.tar.gz", "85ad05fa2ba2c9d274b6921e46ff46a2c40fed8606a2ff55c2ea9126f70e2574"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/nuklear.v181.0.0-cfd8.arm-linux-musleabihf.tar.gz", "8e05543e79423dfa66c2011d2b29425125e4d2f1bd48fe24e2ff5aa7b6090c6b"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-linux-gnu.tar.gz", "2b18b9a728fcd2e56ad6de6027da9c43324c0ac53713b12eeb52f927a12d4faa"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-linux-musl.tar.gz", "b603550b07e7300cdfac88a8fd45b2b93392b4aa1e7f0ebbfc728337987924ca"),
    Windows(:i686) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-w64-mingw32.tar.gz", "1050c372edbfc99a49512b7c56f7a9ca67f00f1efe5339f0d803c8ac70c60e05"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.powerpc64le-linux-gnu.tar.gz", "69aa9069429fcf42cc8efb657cc06c4b2f304dd82ffc2af91aac657b72745514"),
    MacOS(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-apple-darwin14.tar.gz", "74c6289faaeb500c70ee79c7bb265883ef72c675ae08b563618db93ca53a290d"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-linux-gnu.tar.gz", "07e68aae84e06f195baac55c58318f779d9afa99487c59e5008ff3df0766434c"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-linux-musl.tar.gz", "96f332816dcc76a1500641bdf539d77a2a72927e0ad55dbe75ff16ba59164ee1"),
    FreeBSD(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-unknown-freebsd11.1.tar.gz", "c02d46b066faf8aeaa04e17f50a89e4d8f1d4ffa9ba55c632425d101a50ed8c2"),
    Windows(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-w64-mingw32.tar.gz", "c23d58ad1ad34508ead541389323c551d37f44fec042e765ec3a49004392b7c1"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
