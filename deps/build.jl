using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libnuklear"], :libnuklear),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/NuklearBuilder/releases/download/nuklear@181cfd8-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.aarch64-linux-gnu.tar.gz", "a6b8f8239f7f6eef490af544b97f43f6056d04dd10b595a744c7cd8b1a453b37"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.aarch64-linux-musl.tar.gz", "d323957aa3e6ab07ec8d0ad1bbbeee2a2ae576d005de86e9b2ea750f31257c03"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/nuklear.v181.0.0-cfd8.arm-linux-gnueabihf.tar.gz", "167e8764046f2e4f83496cb148ff03c81df91b63e8910e94c083908c6a355744"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/nuklear.v181.0.0-cfd8.arm-linux-musleabihf.tar.gz", "859b829d0c3e0ddc1b7c969ec1a28d0e5d03186da99ddbd794b2621ef4758859"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-linux-gnu.tar.gz", "0516f93016da6378100357ca7471e0c61fbe244c251361629f493d4f3734bd3c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-linux-musl.tar.gz", "1b8d98e9a8da779e792a2b00e73d62a694a55335d177203a60595ab743626567"),
    Windows(:i686) => ("$bin_prefix/nuklear.v181.0.0-cfd8.i686-w64-mingw32.tar.gz", "d813512e1bee5cc715cc9f115e2b568db97b83d7c7b4d09a537d9a80b52cb45a"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.powerpc64le-linux-gnu.tar.gz", "4e69cd8a04dde40f3cc5a764a5e10fdb38de02373069e34ab1f70f22bd4d2440"),
    MacOS(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-apple-darwin14.tar.gz", "8660928dafbf02c5449ce797ffb2fa5aa8ceb822bbc08267dffbda1dd141e8e5"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-linux-gnu.tar.gz", "6e974b2b2f0f3f1afe8cda1e6b38710228fa899a0c05a4bd3bab82c6e3fc478b"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-linux-musl.tar.gz", "611c6c706fefd2a0bfd0cd2620a5e598c548ac5104a764bccdf52407a017e38b"),
    FreeBSD(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-unknown-freebsd11.1.tar.gz", "ec2aee6bef80eb465c4b16bba56a680361e9bae40b76c62da4e77e80985c2f7c"),
    Windows(:x86_64) => ("$bin_prefix/nuklear.v181.0.0-cfd8.x86_64-w64-mingw32.tar.gz", "4066520cc8e1ac56854782350da2e389678cf75664233a0e8873aeaca94fcd15"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
